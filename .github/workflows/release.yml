name: Build & Release EXIF Photo Organizer

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # âœ… Grants permission to push tags
  actions: read
  checks: read
  security-events: read

jobs:
  check-changes:
    name: Check for Code Changes
    runs-on: ubuntu-latest
    outputs:
      code_changed: ${{ steps.filter.outputs.code_changed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Changes
        id: filter
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files: $CHANGED_FILES"
          
          if echo "$CHANGED_FILES" | grep -q -E '(\.py|pyproject\.toml|poetry\.lock|src/|dist/|update_exif\.py)'; then
            echo "Code changes detected."
            echo "code_changed=true" >> $GITHUB_ENV
            echo "::set-output name=code_changed::true"
          else
            echo "No relevant code changes detected."
            echo "code_changed=false" >> $GITHUB_ENV
            echo "::set-output name=code_changed::false"
          fi

  build:
    name: Build Executable
    runs-on: ${{ matrix.os }}
    needs: check-changes
    if: needs.check-changes.outputs.code_changed == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry

      - name: Install Dependencies
        run: poetry install

      - name: Install PyInstaller
        run: poetry add --dev pyinstaller

      - name: Build Executable (Linux/Mac)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          OUTPUT_NAME="exif-photo-organizer-${{ runner.os }}"
          poetry run pyinstaller --onefile --name $OUTPUT_NAME update_exif.py

      - name: Build Executable (Windows)
        if: runner.os == 'Windows'
        run: |
          $OUTPUT_NAME="exif-photo-organizer-Windows"
          poetry run pyinstaller --onefile --name $OUTPUT_NAME update_exif.py
        shell: pwsh

      - name: Upload Mac Executable
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: exif-photo-organizer-mac
          path: dist/exif-photo-organizer-mac*

      - name: Upload Linux Executable
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: exif-photo-organizer-linux
          path: dist/exif-photo-organizer-linux*

      - name: Upload Windows Executable
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: exif-photo-organizer-win
          path: dist/exif-photo-organizer-win.exe*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: needs.check-changes.outputs.code_changed == 'true'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Version Tag
        id: get_tag
        run: |
          TAG_NAME="v1.0.$(date +%s)"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "Generated tag: $TAG_NAME"

      - name: Configure Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions@github.com"

      - name: Push Git Tag
        run: |
          git tag $TAG_NAME
          git push origin $TAG_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Mac Executable
        uses: actions/download-artifact@v4
        with:
          name: exif-photo-organizer-mac
          path: dist/
          merge-multiple: true

      - name: Download Linux Executable
        uses: actions/download-artifact@v4
        with:
          name: exif-photo-organizer-linux
          path: dist/
          merge-multiple: true

      - name: Download Windows Executable
        uses: actions/download-artifact@v4
        with:
          name: exif-photo-organizer-win
          path: dist/
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: dist/exif-photo-organizer-mac, dist/exif-photo-organizer-linux, dist/exif-photo-organizer-win.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}